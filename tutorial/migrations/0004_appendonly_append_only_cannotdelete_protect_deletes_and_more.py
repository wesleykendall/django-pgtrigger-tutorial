# Generated by Django 4.1 on 2022-08-20 17:04

from django.db import migrations
import pghistory.trigger
import pgtrigger
import pgtrigger.migrations
import tutorial.models


class Migration(migrations.Migration):

    dependencies = [
        ('tutorial', '0003_tracked_trackedevent'),
    ]

    operations = [
        pgtrigger.migrations.AddTrigger(
            model_name='appendonly',
            trigger=pgtrigger.Protect(condition=None, declare=None, func=None, level=pgtrigger.Level(name='ROW'), name='append_only', operation=pgtrigger.Operations(pgtrigger.Operation(name='UPDATE'), pgtrigger.Operation(name='DELETE')), referencing=None, timing=None, when=pgtrigger.When(name='BEFORE')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='cannotdelete',
            trigger=pgtrigger.Protect(condition=None, declare=None, func=None, level=pgtrigger.Level(name='ROW'), name='protect_deletes', operation=pgtrigger.Operation(name='DELETE'), referencing=None, timing=None, when=pgtrigger.When(name='BEFORE')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='fsm',
            trigger=pgtrigger.FSM(condition=None, field='status', name='check_status_transitions', transitions=(('unpublished', 'published'), ('unpublished', 'inactive'), ('published', 'inactive'))),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='officialinterface',
            trigger=pgtrigger.Protect(condition=None, declare=None, func=None, level=pgtrigger.Level(name='ROW'), name='protect_inserts', operation=pgtrigger.Operation(name='INSERT'), referencing=None, timing=None, when=pgtrigger.When(name='BEFORE')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='readonlyfield',
            trigger=pgtrigger.Protect(condition=pgtrigger.Q(('old__created_at__df', pgtrigger.F('new__created_at'))), declare=None, func=None, level=pgtrigger.Level(name='ROW'), name='read_only_field', operation=pgtrigger.Operation(name='UPDATE'), referencing=None, timing=None, when=pgtrigger.When(name='BEFORE')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='softdelete',
            trigger=pgtrigger.SoftDelete(condition=None, field='is_active', name='soft_delete', value=False),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='tracked',
            trigger=pghistory.trigger.Event(condition=None, event_model=tutorial.models.TrackedEvent, label='snapshot', name='snapshot_insert', operation=pgtrigger.Operation(name='INSERT'), snapshot='NEW', when=pgtrigger.When(name='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='tracked',
            trigger=pghistory.trigger.Event(condition=pgtrigger.Q(('old__int_field__df', pgtrigger.F('new__int_field')), ('old__char_field__df', pgtrigger.F('new__char_field')), ('old__id__df', pgtrigger.F('new__id')), _connector='OR'), event_model=tutorial.models.TrackedEvent, label='snapshot', name='snapshot_update', operation=pgtrigger.Operation(name='UPDATE'), snapshot='NEW', when=pgtrigger.When(name='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='tracked',
            trigger=pghistory.trigger.Event(condition=None, event_model=tutorial.models.TrackedEvent, label='create', name='create', operation=pgtrigger.Operation(name='INSERT'), snapshot='NEW', when=pgtrigger.When(name='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='tracked',
            trigger=pghistory.trigger.Event(condition=pgtrigger.Q(('new__int_field__lt', 0)), event_model=tutorial.models.TrackedEvent, label='low_int', name='low_int', operation=pgtrigger.Operation(name='UPDATE'), snapshot='NEW', when=pgtrigger.When(name='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='versioned',
            trigger=pgtrigger.Protect(condition=pgtrigger.Q(('old__version__df', pgtrigger.F('new__version'))), declare=None, func=None, level=pgtrigger.Level(name='ROW'), name='protect_version_edits', operation=pgtrigger.Operation(name='UPDATE'), referencing=None, timing=None, when=pgtrigger.When(name='BEFORE')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='versioned',
            trigger=pgtrigger.Trigger(condition=pgtrigger.Condition(sql='OLD.* IS DISTINCT FROM NEW.*'), declare=None, func='NEW.version = NEW.version + 1; RETURN NEW;', level=pgtrigger.Level(name='ROW'), name='versioned', operation=pgtrigger.Operation(name='UPDATE'), referencing=None, timing=None, when=pgtrigger.When(name='BEFORE')),
        ),
    ]
